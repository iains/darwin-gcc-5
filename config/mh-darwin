# The -mdynamic-no-pic ensures that the compiler executable is built without
# position-independent-code -- the usual default on Darwin. This fix speeds
# compiles by 3-5%.  Don't add it if the compiler doesn't also support
# -mno-dynamic-no-pic to undo it.
DARWIN_MDYNAMIC_NO_PIC := \
`case ${host} in i?86-*-darwin* | powerpc-*-darwin*) \
   $(CC) -S -xc /dev/null -o /dev/null -mno-dynamic-no-pic 2>/dev/null \
   && echo -mdynamic-no-pic ;; esac`
DARWIN_GCC_MDYNAMIC_NO_PIC := \
`case ${host} in i?86-*-darwin* | powerpc-*-darwin*) \
   $(CC) -S -xc /dev/null -o /dev/null -mno-dynamic-no-pic 2>/dev/null \
   || echo -mdynamic-no-pic ;; esac`

# If we have a version of ld that understands -no_pie, then invoke this to
# disable PIE for gcc components, since it is incompatible with our pch
# implementation.  Versions of ld that don't understand no_pie will not
# try to add it.
DARWIN_NO_PIE := `case ${host} in *-darwin*) \
  echo "int main() {return 0;}" | \
  $(CC) -xc - -o /dev/null -Wl,-no_pie 2>/dev/null \
  && echo -Wl,-no_pie ;; esac;`

BOOT_CFLAGS += $(DARWIN_MDYNAMIC_NO_PIC)
BOOT_LDFLAGS += $(DARWIN_NO_PIE)

# Similarly, for cross-compilation.
STAGE1_CFLAGS += $(DARWIN_MDYNAMIC_NO_PIC)
STAGE1_LDFLAGS += $(DARWIN_NO_PIE)

# Without -mno-dynamic-no-pic support, add -mdynamic-no-pic just to later
# stages when we know it is built with gcc.
STAGE2_CFLAGS += $(DARWIN_GCC_MDYNAMIC_NO_PIC)
STAGE3_CFLAGS += $(DARWIN_GCC_MDYNAMIC_NO_PIC)
STAGE4_CFLAGS += $(DARWIN_GCC_MDYNAMIC_NO_PIC)
